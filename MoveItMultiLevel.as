/*	Filename:	MoveItApp.as		Purpose:	This is the application-level class for Move It!  It controls things like game over states				and restarts					Author:		Justin Bachorik		Date:		3/19/09	*/package {		import flash.display.*;	import flash.text.*;	import flash.events.*;	import caurina.transitions.Tweener;	import flash.net.*;	import flash.xml.*;			public class MoveItMultiLevel extends MoveItDirector {				// constants		private static const ANIM_TIME = 1;		private static const TRANSITION_TYPE = 'easeInQuint';		private static const START_BTN_X = 225;		private static const START_BTN_Y = 150;		private static const RESTART_BTN_X = 225;		private static const RESTART_BTN_Y = 150;		private static const NEXT_BTN_X = 225;		private static const NEXT_BTN_Y = 150;		private static const LEVEL_COUNTER_X = 490;		private static const LEVEL_COUNTER_Y = 10;				// instance variables		var myMoveIt:MoveIt;		var myTextField:TextField;		var myTextFormat:TextFormat;		var myRestartButton:Sprite;		var myNextLevelButton:Sprite;		var myStartButton:Sprite;		var myLevelCounter:TextField;		var myLevelFormat:TextFormat;				// for file XML		private var myXml:XML;		private var myXmlLoader:URLLoader;				// for level tracking		private var myLevels:Array;		private var myCurrentLevel:Number;						// constructor		public function MoveItMultiLevel():void {						// load the levels (which sets up the title screen when they're loaded)			loadLevels();						// show the title screen			setUpTextField();			setUpRestartButton();			setUpNextLevelButton();			setUpStartButton();			setUpLevelCounter();						/**/			// set up textfield and restart button								this.stage.stageFocusRect = false;											} // end constructor				// function to set up the level counter		private function setUpLevelCounter():void {			myLevelCounter = new TextField;			myLevelFormat = new TextFormat;			myLevelCounter.text = '3/5';			myLevelCounter.x = LEVEL_COUNTER_X;			myLevelCounter.y = LEVEL_COUNTER_Y;						myLevelFormat.font = 'Tahoma';			myLevelFormat.size = 20;			myLevelFormat.color = '0x999999';			myLevelCounter.setTextFormat(myLevelFormat);			myLevelCounter.alpha = 0;			this.addChild(myLevelCounter);		} // end setUpLevelCounter				// function to update the level counter's text		private function updateLevelCounter():void {			var readableLevel:Number = myCurrentLevel + 1;			var readableMax:Number = myLevels.length;			myLevelCounter.text = readableLevel+'/'+readableMax;			myLevelCounter.setTextFormat(myLevelFormat);		}				// function to load the levels from XML (which is actually PHP)		private function loadLevels():void {			// specify location of external xml file			var urlRequest = new URLRequest('xml/getLevels.php');			// instantiate the loader			myXmlLoader = new URLLoader();			// add event listener so we know when the xml is loaded			myXmlLoader.addEventListener(Event.COMPLETE, xmlCompleteListener);			// and load the XML			myXmlLoader.load(urlRequest);		} 	// end loadLevels				// function that handles the XML list of levels and transcribes them to an array		private function xmlCompleteListener(e:Event):void {				// translate to XML			var myLevelsXml:XML = new XML(myXmlLoader.data);						// initialize levels array			myLevels = new Array();									// iterate over the XML			for each (var child:XML in myLevelsXml.children()) {				myLevels.push(child.@id);			}						// initialize current level tracker			myCurrentLevel = 0;						setUpTitles();					}				// handler for game over condition		override public function gameOver():void {			myTextField.text = 'Not this time...';			myTextField.setTextFormat(myTextFormat);			Tweener.addTween(myMoveIt, {alpha: 0, time: 1, onComplete: gameOverHandler});			Tweener.addTween(myLevelCounter, {alpha: 0, time: 1});					} // end gameOver				// callback to handle gameOver animations		private function gameOverHandler() {						this.removeChild(myMoveIt);						myMoveIt = null;						this.addChild(myTextField);			this.addChild(myRestartButton);						myTextField.alpha = 0;			myRestartButton.alpha = 0;			Tweener.addTween(myTextField, {alpha: 1, time: 1} );			Tweener.addTween(myRestartButton, {alpha: 1, time: 1} );					} // end gameOverHandler						// function for handling win		override public function youWin():void {			if(myCurrentLevel != myLevels.length - 1) {				myTextField.text = 'Nice Work!';			} else {				myTextField.text = 'CONGRATULATIONS!\n\nYou are a true champion!';			}			myTextField.setTextFormat(myTextFormat);			Tweener.addTween(myMoveIt, {alpha: 0, time: 1, onComplete: youWinHandler});			Tweener.addTween(myLevelCounter, {alpha: 0, time: 1});		} // end youWin				// callback to handle youWin animations		private function youWinHandler() {						this.removeChild(myMoveIt);						myMoveIt = null;						this.addChild(myTextField);			// only add next level button if there IS a next level			if(myCurrentLevel != myLevels.length - 1) {					this.addChild(myNextLevelButton);			}							myTextField.alpha = 0;			myNextLevelButton.alpha = 0;			Tweener.addTween(myTextField, {alpha: 1, time: 1} );			Tweener.addTween(myNextLevelButton, {alpha: 1, time: 1} );					} // end youWinHandler				private function setUpTextField():void {			myTextField = new TextField;			myTextFormat = new TextFormat;			myTextField.autoSize = TextFieldAutoSize.CENTER;			myTextField.x = 0			myTextField.y = 50;			myTextField.width = stage.stageWidth;						myTextFormat.font = 'Tahoma';			myTextFormat.color = '0x222222';			myTextFormat.size = 40;			myTextField.setTextFormat(myTextFormat);					}	// end setUpTextField				// function to set up start button		private function setUpStartButton():void {			myStartButton = new Sprite();						var myStartButtonText:TextField = new TextField;			myStartButtonText.autoSize = TextFieldAutoSize.CENTER;			myStartButton.x = START_BTN_X;			myStartButton.y = START_BTN_Y;			myStartButtonText.text = 'Click Here To Start';						var myStartFormat:TextFormat = new TextFormat;			myStartFormat.font = 'Tahoma';			myStartFormat.size = 20;			myStartFormat.color = '0x999999';			myStartButtonText.setTextFormat(myStartFormat);						myStartButton.addEventListener(MouseEvent.CLICK, startMoveIt);			myStartButton.useHandCursor = true;			myStartButton.mouseChildren = false;			myStartButton.buttonMode = true;			myStartButton.addChild(myStartButtonText);					}	// end setUpStartButton				// function to begin first level		private function startMoveIt(e:Event) {			// alpha out the title and start button and remove them from the screen			Tweener.addTween(myStartButton, { alpha:0, time:ANIM_TIME, onComplete: function() { this.parent.removeChild(myStartButton)}});			Tweener.addTween(myTextField, { alpha:0, time:ANIM_TIME, onComplete: function() { this.parent.removeChild(myTextField)}});									setUpNewGame(myLevels[myCurrentLevel]);					}	// end startMoveIt				// function to set up next level button		private function setUpNextLevelButton():void {			myNextLevelButton = new Sprite();						var myNextLevelButtonText:TextField = new TextField;			myNextLevelButtonText.text = 'Click For Next Level';			myNextLevelButton.x = NEXT_BTN_X;			myNextLevelButton.y = NEXT_BTN_Y;			myNextLevelButtonText.autoSize = TextFieldAutoSize.CENTER;									var myNextLevelFormat:TextFormat = new TextFormat;			myNextLevelFormat.font = 'Tahoma';			myNextLevelFormat.size = 20;			myNextLevelFormat.color = '0x999999';			myNextLevelButtonText.setTextFormat(myNextLevelFormat);			myNextLevelButton.addEventListener(MouseEvent.CLICK, nextLevelHandler);						myNextLevelButton.addChild(myNextLevelButtonText);			myNextLevelButton.buttonMode = true;			myNextLevelButton.useHandCursor = true;			myNextLevelButton.mouseChildren = false;					}	// end setUpNextLevelButton				// function to handle the next level setup and transition out of congrats screen		private function nextLevelHandler(e:Event) {						Tweener.addTween(myTextField, {alpha: 0, time: ANIM_TIME, onComplete: function() { this.parent.removeChild(myTextField); }} );			Tweener.addTween(myNextLevelButton, {alpha: 0, time: ANIM_TIME, onComplete: function() { 																								this.parent.removeChild(myNextLevelButton);																								setUpNewGame(myLevels[++myCurrentLevel]);																								}});								}	// end nextLevelHandler				// function to set up the titles		private function setUpTitles():void {						// first the titles			this.addChild(myTextField);			myTextField.alpha = 0;			myTextField.text = 'MOVE IT!';			myTextField.setTextFormat(myTextFormat);			Tweener.addTween(myTextField, {alpha:1, time:ANIM_TIME, transition: TRANSITION_TYPE});						// then the button			this.addChild(myStartButton);			myStartButton.alpha = 0;			Tweener.addTween(myStartButton, {alpha:1, time:ANIM_TIME, transition: TRANSITION_TYPE, delay: ANIM_TIME});								}	// end setUpTitles						// function to set up restart button		private function setUpRestartButton():void {			myRestartButton = new Sprite();			var myRestartButtonText:TextField = new TextField;			myRestartButtonText.text = 'Click to retry';			myRestartButton.x = RESTART_BTN_X;			myRestartButton.y = RESTART_BTN_Y;			myRestartButtonText.autoSize = TextFieldAutoSize.CENTER;			var myRestartFormat:TextFormat = new TextFormat;			myRestartFormat.font = 'Tahoma';			myRestartFormat.size = 20;			myRestartFormat.color = '0x999999';			myRestartButtonText.setTextFormat(myRestartFormat);						myRestartButton.addEventListener(MouseEvent.CLICK, restart);						myRestartButton.addChild(myRestartButtonText);			myRestartButton.useHandCursor = true;			myRestartButton.buttonMode = true;			myRestartButton.mouseChildren = false;					}	// end setUpRestartButton						// restart function		private function restart(e:MouseEvent):void {						Tweener.addTween(myTextField, {alpha: 0, time: ANIM_TIME, onComplete: function() { this.parent.removeChild(myTextField); }} );			Tweener.addTween(myRestartButton, {alpha: 0, time: ANIM_TIME, onComplete: function() { 																								this.parent.removeChild(myRestartButton);																								setUpNewGame(myLevels[myCurrentLevel]);																								}});								}	// end restart				// function to set up a new game		private function setUpNewGame(level):void {			trace('starting new game with level '+level);			myMoveIt = new MoveIt();			this.addChild(myMoveIt);			myMoveIt.init('xml/getLevel.php?id='+level);			stage.focus = myMoveIt;						// tween in the level tracker and update it			updateLevelCounter();			Tweener.addTween(myLevelCounter, { alpha: 1, time: 5 });					} // end setUpNewGame					} // end class MoveItApp	} // end package