/* 	Filename:	Moveit.as		Purpose:	Main class for Move It!		Author:		Justin Bachorik		Date:		3/20/09	*/package {		import flash.display.MovieClip;	import flash.utils.*;	import flash.events.*;	import flash.net.*;	import flash.xml.*;	import caurina.transitions.Tweener;	import flash.text.*;	public class MoveIt extends MovieClip {				// constants		private static const BOARD_X = 175;		private static const BOARD_Y = 80;		private static const COUNTER_X = 50;		private static const COUNTER_Y = 80;		private static const TITLE_X = 10;		private static const TITLE_Y = 10;		private static const CREATOR_X = 10;		private static const CREATOR_Y = 40;		private static const FADEIN_TIME = 1;		private static const TRANSITION_TYPE = 'easeInQuint';				// instance variables here		private var myBoard:MoveItBoard;		private var myMoveCounter:MoveCounter;		private var movesAllowed:Boolean = true;	// tracks whether moves are being animated		private var myTitle:TextField;		private var myCreator:TextField;		private var myFormat:TextFormat;				// for file XML		private var myXml:XML;		private var myXmlLoader:URLLoader;								// constructor				public function MoveIt():void {					} 	// end constructor				// init routine, called after it's added to the stage by the main app		public function init(level:String):void {												// set up the game's visuals			setUpVisuals();						// set up the key listeners			setUpKeyListeners();						// set up level			xmlToLevel(level);						// alpha in			this.alpha = 0;			Tweener.addTween(this, {alpha: 1, time: FADEIN_TIME, transition: TRANSITION_TYPE});						// ensure that focus is correct			//stage.focus = this;						// get rid of yellow boxes			stage.stageFocusRect = false;										}	// end init						private function setUpVisuals():void {						// the board			myBoard = new MoveItBoard(10);			this.addChild(myBoard);			myBoard.x = BOARD_X;			myBoard.y = BOARD_Y;						// the move counter			myMoveCounter = new MoveCounter(0);			this.addChild(myMoveCounter);			myMoveCounter.x = COUNTER_X;			myMoveCounter.y = COUNTER_Y;					} 	// end setUpVisuals				// function to set the level title		private function setUpTitle(levelTitle:String):void {			myTitle = new TextField();			myTitle.text = levelTitle;			myTitle.autoSize = TextFieldAutoSize.LEFT;			myTitle.x = TITLE_X;			myTitle.y = TITLE_Y;						myFormat = new TextFormat();			myFormat.font = 'Tahoma';			myFormat.color = '0x222222';			myFormat.size = 20;			myTitle.setTextFormat(myFormat);						this.addChild(myTitle);						//trace('title is: '+levelTitle);		}				// function to set the level creator		private function setUpCreator(levelCreator:String):void {			myCreator = new TextField();			myCreator.text = 'by '+levelCreator;			myCreator.autoSize = TextFieldAutoSize.LEFT;			myCreator.x = CREATOR_X;			myCreator.y = CREATOR_Y;						myFormat = new TextFormat();			myFormat.font = 'Tahoma';			myFormat.color = '0x888888';			myFormat.size = 20;			myCreator.setTextFormat(myFormat);						this.addChild(myCreator);			//trace('creator is: '+levelCreator);		}				// this function reads in the level's xml file and calls appropriate routines on the board to set it up		private function xmlToLevel(level:String) {						// specify location of external xml file			var urlRequest = new URLRequest(level);			// instantiate the loader			myXmlLoader = new URLLoader();			// add event listener so we know when the xml is loaded			myXmlLoader.addEventListener(Event.COMPLETE, xmlCompleteListener);			// and load the XML			myXmlLoader.load(urlRequest);								} // end xmlToLevel				// function to handle XML loading and finish where xmlToLevel left off		private function xmlCompleteListener(e:Event) {			var myLevelXml:XML = new XML(myXmlLoader.data);									// iterate over the XML			for each (var child:XML in myLevelXml.children()) {								// make the level element								// for walls				if(child.@type == 'wall') {					myBoard.addWall(child.@xPos,child.@yPos);				}								// for the hero				if(child.@type == 'hero') {					myBoard.addHero(child.@xPos,child.@yPos);				}								// for the goal				if(child.@type == 'goal') {					myBoard.addGoal(child.@xPos,child.@yPos);				}								// for the powerups				if(child.@type == 'powerup') {					myBoard.addPowerUp(child.@xPos,child.@yPos,child.@strength);				}								// for the title				if(child.@type == 'title') {					setUpTitle(child.@name);				}				// for the creator				if(child.@type == 'creator') {					setUpCreator(child.@name);				}				// for the movecounter				if(child.@type == 'initial_strength') {					myMoveCounter.setNumMoves(child.@num);				}							}								}						// function to set up the arrow key listener		private function setUpKeyListeners():void {			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);		} // end setUpKeyListeners				// function to remove the arrow key listener		private function removeKeyListeners():void {			stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownListener);					} // end removeKeyListeners				// the function that handles the keypresses		private function keyDownListener(e:KeyboardEvent):void {						// figure out which key it was and do the right thing			switch(e.keyCode) {								// up arrow				case 38:					tryToMoveHero(0,-1);					break;									// down arrow					case 40:					tryToMoveHero(0, 1);					break;								// left arrow				case 37:					tryToMoveHero(-1, 0);					break;								// right arrow				case 39:					tryToMoveHero(1,0);					break;							}					}	// end keyDownListener				// function that checks constraints regarding the hero's desired motion		private function tryToMoveHero(deltaX:Number, deltaY:Number):void {						// check with the board to make sure there aren't any walls or anything			if(myBoard.canMoveHeroBy(deltaX,deltaY) && movesAllowed) {												// move the hero				myBoard.moveHero(deltaX, deltaY);				movesAllowed = false;	// won't be legal again till move is over								// decrement the counter				myMoveCounter.decrement();								// check for win/lose								var myParent:Object = MoveItDirector(this.parent);								// check for win				if(myBoard.isWin()) {					removeKeyListeners();					myParent.youWin();					return;				}								// check for powerups				if(myBoard.isPowerUp()) {					myMoveCounter.addNumMoves(myBoard.getPowerUpStrength());					myBoard.removePowerUp();				}								// check for lose				if(myMoveCounter.getNumMoves() == 0) {					removeKeyListeners();					myParent.gameOver();				}						   }								} // end function tryToMoveHero				// accessor function that lets the board tell the main class when a move has finished animating		public function setMovesAllowed() {			movesAllowed = true;		} // end function setMovesAllowed					}	// end class MoveIt}	// end package