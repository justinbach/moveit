/*	Filename:	LevelEditor.as		Purpose:	Main app for Move It! Level Editor		Author:		Justin Bachorik		Date:		3/21/09	*/package {		import flash.display.*;	import flash.net.*;	import flash.events.*;	import caurina.transitions.Tweener;	import flash.text.*;		public class LevelEditor extends MovieClip {				// constants		private static const BOARD_X = 180;		private static const BOARD_Y = 30;		private static const PALETTE_X = 155;		private static const PALETTE_Y = 350;		private static const SAVE_X = 40;		private static const SAVE_Y = 70;		private static const SAVE_CONFIRM_X = 40;		private static const SAVE_CONFIRM_Y = 30;				// instance variables		var myBoard:EditorBoard;		var myPalette:EditorPalette;		var myID:Number;		var myCurrentBrush:String = 'Hero'; // tracker for current brush state of palette		var mySaveButton:Sprite;		var mySaveConfirm:TextField;		var mySaveConfirmFormat:TextFormat;				// for file XML		private var myXml:XML;		private var myXmlLoader:URLLoader;						// constructor		public function LevelEditor():void {						setUpBoard();			setUpPalette();			setUpMySaveButton();						// listen for loadcomplete so we can get our ID			this.loaderInfo.addEventListener(Event.COMPLETE, loaderComplete);					}	// end constructor				// function to get ID from the loaderinfo		function loaderComplete(myEvent:Event)		{			var myQueryStrings=this.loaderInfo.parameters;			myID=myQueryStrings.id;			// set up level			xmlToLevel('../xml/getLevel.php?id='+myID);		}		// this function reads in the level's xml file and calls appropriate routines on the board to set it up		private function xmlToLevel(level:String) {						// specify location of external xml file			var urlRequest = new URLRequest(level);			// instantiate the loader			myXmlLoader = new URLLoader();			// add event listener so we know when the xml is loaded			myXmlLoader.addEventListener(Event.COMPLETE, xmlCompleteListener);			// and load the XML			myXmlLoader.load(urlRequest);								} // end xmlToLevel		// function to handle XML loading and finish where xmlToLevel left off		private function xmlCompleteListener(e:Event) {			var myLevelXml:XML = new XML(myXmlLoader.data);									// iterate over the XML			for each (var child:XML in myLevelXml.children()) {								// make the level element								// for walls				if(child.@type == 'wall') {					myBoard.addItemToBoard(new Wall(),child.@xPos,child.@yPos);				}								// for the hero				if(child.@type == 'hero') {					myBoard.addItemToBoard(new Hero(), child.@xPos,child.@yPos);				}								// for the goal				if(child.@type == 'goal') {					myBoard.addItemToBoard(new Goal(),child.@xPos,child.@yPos);				}								// for the powerups				if(child.@type == 'powerup') {					myBoard.addItemToBoard(new PowerUp(child.@strength),child.@xPos,child.@yPos);				}			}								}			// mutator function for current brush		public function setBrush(newBrush:String):void {			myCurrentBrush = newBrush;		}	// end setBrush				// accessor function for current brush		public function getBrush():String {			return myCurrentBrush;		}							// function to set up the board		private function setUpBoard():void {						myBoard = new EditorBoard(10);			this.addChild(myBoard);			myBoard.x = BOARD_X;			myBoard.y = BOARD_Y;		}				// function to set up the palette		private function setUpPalette():void {						myPalette = new EditorPalette();			this.addChild(myPalette);			myPalette.x = PALETTE_X;			myPalette.y = PALETTE_Y;		}				// function to set up the save button		private function setUpMySaveButton():void {						var saveText:TextField = new TextField();			var saveTextFormat:TextFormat = new TextFormat();			saveText.text = 'Click To Save';			saveText.autoSize = TextFieldAutoSize.LEFT;			saveTextFormat.font = 'Tahoma';			saveTextFormat.size = 20;			saveText.setTextFormat(saveTextFormat);						mySaveButton = new Sprite();			mySaveButton.buttonMode = true;			mySaveButton.useHandCursor = true;			mySaveButton.mouseChildren = false;						mySaveButton.addChild(saveText);			this.addChild(mySaveButton);			mySaveButton.x = SAVE_X;			mySaveButton.y = SAVE_Y;						// set up the save confirm			mySaveConfirm = new TextField();			mySaveConfirmFormat = new TextFormat();			mySaveConfirm.text = 'Saved';			mySaveConfirm.autoSize = TextFieldAutoSize.LEFT;			mySaveConfirmFormat.font = 'Tahoma';			mySaveConfirmFormat.size = 20;			mySaveConfirmFormat.color = 0xFF0000;			mySaveConfirm.setTextFormat(mySaveConfirmFormat);			this.addChild(mySaveConfirm);			mySaveConfirm.x = SAVE_CONFIRM_X;			mySaveConfirm.y = SAVE_CONFIRM_Y;			mySaveConfirm.alpha = 0;									// event listener for saving the level			mySaveButton.addEventListener(MouseEvent.CLICK, saveTheLevel);		}	// end setUpMySaveButton				// function to save the level		private function saveTheLevel(e:Event):void {							var request:URLRequest = new URLRequest('../xml/saveLevel.php');  			var loader:URLLoader = new URLLoader();  			loader.dataFormat = URLLoaderDataFormat.TEXT; 			var variables = new URLVariables();			variables.levelXml = myBoard.getLevelXml().toXMLString();			variables.levelID = myID;			request.data = variables;			//trace(myBoard.getLevelXml().toXMLString());			//request.contentType = 'text/xml';			request.method = URLRequestMethod.POST;  			loader.addEventListener(Event.COMPLETE, handleComplete);  			//loader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);  			loader.load(request);  						// flash the saved text			mySaveConfirm.alpha = 1;			Tweener.addTween(mySaveConfirm, { alpha: 0, time: 2 });					} 	// end saveTheLevel				// handles callback from XML send		private function handleComplete(e:Event) {			var loader:URLLoader = URLLoader(e.target);  			trace(loader.data); 		} // end handleComplete					}	// end class LevelEditor	} // end package		